/*
 * generated by Xtext
 */
package org.xtext.project.tdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransfoDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcmetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcmetamodelSrcMetamodelParserRuleCall_3_0 = (RuleCall)cSrcmetamodelAssignment_3.eContents().get(0);
		private final Assignment cSrcmodelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSrcmodelSrcModelParserRuleCall_4_0 = (RuleCall)cSrcmodelAssignment_4.eContents().get(0);
		private final Assignment cLayerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayerLayerParserRuleCall_5_0 = (RuleCall)cLayerAssignment_5.eContents().get(0);
		private final Assignment cTargetmodelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetmodelTrgModelParserRuleCall_6_0 = (RuleCall)cTargetmodelAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transformation:
		//	"transformation" name=ID "{" srcmetamodel=SrcMetamodel srcmodel=SrcModel layer+=Layer+ targetmodel=TrgModel "}";
		@Override public ParserRule getRule() { return rule; }

		//"transformation" name=ID "{" srcmetamodel=SrcMetamodel srcmodel=SrcModel layer+=Layer+ targetmodel=TrgModel "}"
		public Group getGroup() { return cGroup; }

		//"transformation"
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//srcmetamodel=SrcMetamodel
		public Assignment getSrcmetamodelAssignment_3() { return cSrcmetamodelAssignment_3; }

		//SrcMetamodel
		public RuleCall getSrcmetamodelSrcMetamodelParserRuleCall_3_0() { return cSrcmetamodelSrcMetamodelParserRuleCall_3_0; }

		//srcmodel=SrcModel
		public Assignment getSrcmodelAssignment_4() { return cSrcmodelAssignment_4; }

		//SrcModel
		public RuleCall getSrcmodelSrcModelParserRuleCall_4_0() { return cSrcmodelSrcModelParserRuleCall_4_0; }

		//layer+=Layer+
		public Assignment getLayerAssignment_5() { return cLayerAssignment_5; }

		//Layer
		public RuleCall getLayerLayerParserRuleCall_5_0() { return cLayerLayerParserRuleCall_5_0; }

		//targetmodel=TrgModel
		public Assignment getTargetmodelAssignment_6() { return cTargetmodelAssignment_6; }

		//TrgModel
		public RuleCall getTargetmodelTrgModelParserRuleCall_6_0() { return cTargetmodelTrgModelParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SrcMetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SrcMetamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		
		//SrcMetamodel:
		//	"USE" name=ID importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"USE" name=ID importURI=STRING
		public Group getGroup() { return cGroup; }

		//"USE"
		public Keyword getUSEKeyword_0() { return cUSEKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
	}

	public class SrcModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SrcModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConformsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourcemetamodelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSourcemetamodelSrcMetamodelCrossReference_2_1_0 = (CrossReference)cSourcemetamodelAssignment_2_1.eContents().get(0);
		private final RuleCall cSourcemetamodelSrcMetamodelIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSourcemetamodelSrcMetamodelCrossReference_2_1_0.eContents().get(1);
		
		//SrcModel:
		//	"IN" name=ID ("conforms" sourcemetamodel=[SrcMetamodel]);
		@Override public ParserRule getRule() { return rule; }

		//"IN" name=ID ("conforms" sourcemetamodel=[SrcMetamodel])
		public Group getGroup() { return cGroup; }

		//"IN"
		public Keyword getINKeyword_0() { return cINKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"conforms" sourcemetamodel=[SrcMetamodel]
		public Group getGroup_2() { return cGroup_2; }

		//"conforms"
		public Keyword getConformsKeyword_2_0() { return cConformsKeyword_2_0; }

		//sourcemetamodel=[SrcMetamodel]
		public Assignment getSourcemetamodelAssignment_2_1() { return cSourcemetamodelAssignment_2_1; }

		//[SrcMetamodel]
		public CrossReference getSourcemetamodelSrcMetamodelCrossReference_2_1_0() { return cSourcemetamodelSrcMetamodelCrossReference_2_1_0; }

		//ID
		public RuleCall getSourcemetamodelSrcMetamodelIDTerminalRuleCall_2_1_0_1() { return cSourcemetamodelSrcMetamodelIDTerminalRuleCall_2_1_0_1; }
	}

	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Layer:
		//	"apply" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"apply" name=ID
		public Group getGroup() { return cGroup; }

		//"apply"
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TrgModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrgModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFilepathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilepathSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilepathAssignment_2.eContents().get(0);
		
		//TrgModel:
		//	"OUT" name=ID filepath=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"OUT" name=ID filepath=STRING
		public Group getGroup() { return cGroup; }

		//"OUT"
		public Keyword getOUTKeyword_0() { return cOUTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//filepath=STRING
		public Assignment getFilepathAssignment_2() { return cFilepathAssignment_2; }

		//STRING
		public RuleCall getFilepathSTRINGTerminalRuleCall_2_0() { return cFilepathSTRINGTerminalRuleCall_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// *Operation:
		//	'Rename' | 'Remove' | 'Add'
		//	
		//;
		//Rename:
		//	 (entity=[Import]'.')
		//	;
		//Remove:
		//	(entity=[Import])
		//;
		//Add:
		//	(entity=[Import])
		//;
		//
		//entity:
		//	'class' | 'Association' | 'Attribute'
		//;
		// * / / *Type:
		//  DataType | Entity;
		//DataType:
		//  "datatype" name=ID;
		//  
		//  Transformation:
		//  "transformation" name=ID "{"
		//    (layers+=Layer);  
		//    //source = sourcemodelref;
		//       
		//  "}";* / QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final TransformationElements pTransformation;
	private final SrcMetamodelElements pSrcMetamodel;
	private final SrcModelElements pSrcModel;
	private final LayerElements pLayer;
	private final TrgModelElements pTrgModel;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransfoDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTransformation = new TransformationElements();
		this.pSrcMetamodel = new SrcMetamodelElements();
		this.pSrcModel = new SrcModelElements();
		this.pLayer = new LayerElements();
		this.pTrgModel = new TrgModelElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.project.tdsl.TransfoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Transformation:
	//	"transformation" name=ID "{" srcmetamodel=SrcMetamodel srcmodel=SrcModel layer+=Layer+ targetmodel=TrgModel "}";
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//SrcMetamodel:
	//	"USE" name=ID importURI=STRING;
	public SrcMetamodelElements getSrcMetamodelAccess() {
		return pSrcMetamodel;
	}
	
	public ParserRule getSrcMetamodelRule() {
		return getSrcMetamodelAccess().getRule();
	}

	//SrcModel:
	//	"IN" name=ID ("conforms" sourcemetamodel=[SrcMetamodel]);
	public SrcModelElements getSrcModelAccess() {
		return pSrcModel;
	}
	
	public ParserRule getSrcModelRule() {
		return getSrcModelAccess().getRule();
	}

	//Layer:
	//	"apply" name=ID;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}

	//TrgModel:
	//	"OUT" name=ID filepath=STRING;
	public TrgModelElements getTrgModelAccess() {
		return pTrgModel;
	}
	
	public ParserRule getTrgModelRule() {
		return getTrgModelAccess().getRule();
	}

	/// *Operation:
	//	'Rename' | 'Remove' | 'Add'
	//	
	//;
	//Rename:
	//	 (entity=[Import]'.')
	//	;
	//Remove:
	//	(entity=[Import])
	//;
	//Add:
	//	(entity=[Import])
	//;
	//
	//entity:
	//	'class' | 'Association' | 'Attribute'
	//;
	// * / / *Type:
	//  DataType | Entity;
	//DataType:
	//  "datatype" name=ID;
	//  
	//  Transformation:
	//  "transformation" name=ID "{"
	//    (layers+=Layer);  
	//    //source = sourcemodelref;
	//       
	//  "}";* / QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
